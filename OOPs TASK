Q1, Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed
and average_of_vehicle.

      class vehicle:
    
          def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):
              self.name_of_vehicle = name_of_vehicle
              self.max_speed = max_speed
              self.average_of_vehicle = average_of_vehicle
              print("My vehicle name", self.name_of_vehicle)
              print("vehicle speed is ", self.max_speed)
              print("average of the vehicle is", self.average_of_vehicle)
      obj_vehicle = vehicle("toyato", 180, 60)
      
      
Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.
Create a method named seating_capacity which takes capacity as an argument and returns the name of
the vehicle and its seating capacity.

      class vehicle:
    
          def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):
              self.name_of_vehicle = name_of_vehicle
              self.max_speed = max_speed
              self.average_of_vehicle = average_of_vehicle
      class child(vehicle):
    
          def seating_capacity(self,capacity):
              self.capacity = capacity
              print("My vehicle name", self.name_of_vehicle)
              print("Vehicle capacity is", self.capacity)
      child_obj = child("toyato", 180, 60)
      child_obj.seating_capacity(8)
          
Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance.

      Multiple Inheritance:-
            When a class is derived from more than one base class it is called multiple Inheritance. The derived class inherits all the features of the base case.
            
            class Class1:
                def m(self):
                    print("In Class1")  
     
            class Class2(Class1):
                def m(self):
                    print("In Class2")
                    Class1.m(self)

            class Class3(Class1):
                def m(self):
                    print("In Class3")
                    Class1.m(self)  

            class Class4(Class2, Class3):
                def m(self):
                    print("In Class4")  
                    Class2.m(self)
                    Class3.m(self)

            obj = Class4()
            obj.m()

Q4. What are getter and setter in python? Create a class and create a getter and a setter method in this
class.

            In Python, getters and setters are not the same as those in other object-oriented programming languages. Basically, the main purpose of using getters and setters in object-oriented programs is to ensure data encapsulation. Private variables in python are not actually hidden fields like in other object oriented languages. Getters and Setters in python are often used when:

                  1. We use getters & setters to add validation logic around getting and setting a value.
                  2. To avoid direct access of a class field i.e. private variables cannot be accessed directly or modified by external user.
            
            class pwskills2:
    
                def __init__(self, course_name, course_price):
                    self.__course_price = course_price
                    self.course_name = course_name

                @property
                def course_price_access(self):
                    return self.__course_price

                @course_price_access.setter
                def course_price_set(self, price):
                    if price <= 45000:
                        pass
                    else:
                        self.__course_price = price
            pw2 = pwskills2("DS masters",4500)
            
Q5.What is method overriding in python? Write a python code to demonstrate method overriding.
