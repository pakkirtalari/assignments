Q1. What is multiprocessing in python? Why is it useful?

  Multiprocessing in Python is a built-in package that allows the system to run multiple processes simultaneously. It will enable the breaking of applications into smaller threads that can run independently.
  Python multiprocessing Process class is an abstraction that sets up another Python process, provides it to run code and a way for the parent application to control execution. There are two important functions that belongs to the Process class - start() and join() function.
  
Q2. What are the differences between multiprocessing and multithreading?

  While multithreading and multiprocessing can both be used to increase the computing power of a system, there are some key differences between these approaches. Here are some of the primary ways these methods differ from one another:

    1. Multiprocessing uses two or more CPUs to increase computing power, whereas multithreading uses a single process with multiple code segments to increase computing power.
    2. Multithreading focuses on generating computing threads from a single process, whereas multiprocessing increases computing power by adding CPUs.
    3. Multiprocessing is used to create a more reliable system, whereas multithreading is used to create threads that run parallel to each other.
    4. Multithreading is quick to create and requires few resources, whereas multiprocessing requires a significant amount of time and specific resources to create.
    5. Multiprocessing executes many processes simultaneously, whereas multithreading executes many threads simultaneously.
    6. Multithreading uses a common address space for all the threads, whereas multiprocessing creates a separate address space for each process.

Q3. Write a python code to create a process using the multiprocessing module.

    def square(n):
      return n**2

    if __name__ == "__main__":
        with multiprocessing.Pool(processes=5) as pool:
            op = pool.map(square, [1,2,3,4,6,4,6])
            print(op) 

Q4. What is a multiprocessing pool in python? Why is it used?

    Python multiprocessing Pool can be used for parallel execution of a function across multiple input values, distributing the input data across processes (data parallelism).
    The Pool class in multiprocessing can handle an enormous number of processes. It allows you to run multiple jobs per process (due to its ability to queue the jobs). The memory is allocated only to the executing processes, unlike the Process class, which allocates memory to all the processes.
    
Q5. How can we create a pool of worker processes in python using the multiprocessing module?

    from multiprocessing import Pool, TimeoutError
    import time
    import os

    def f(x):
        return x*x

    if __name__ == '__main__':
        with Pool(processes=4) as pool:

            print(pool.map(f, range(10)))

            for i in pool.imap_unordered(f, range(10)):
                print(i)

            res = pool.apply_async(f, (20,))      
            print(res.get(timeout=1))            

            res = pool.apply_async(os.getpid, ()) 
            print(res.get(timeout=1))           

            multiple_results = [pool.apply_async(os.getpid, ()) for i in range(4)]
            print([res.get(timeout=1) for res in multiple_results])

            res = pool.apply_async(time.sleep, (10,))
            try:
                print(res.get(timeout=1))
            except TimeoutError:
                print("We lacked patience and got a multiprocessing.TimeoutError")

            print("For the moment, the pool remains available for more work")

        print("Now the pool is closed and no longer available")

Q6. Write a python program to create 4 processes, each process should print a different number using the
multiprocessing module in python.

    from multiprocessing import Pool, TimeoutError
    import time
    import os

    def f(x):
        return x*x

    if __name__ == '__main__':
        with Pool(processes=4) as pool:

            print(pool.map(f, range(10)))

            for i in pool.imap_unordered(f, range(10)):
                print(i)

            res = pool.apply_async(f, (20,))      
            print(res.get(timeout=1))            

            res = pool.apply_async(os.getpid, ()) 
            print(res.get(timeout=1))           

            multiple_results = [pool.apply_async(os.getpid, ()) for i in range(4)]
            print([res.get(timeout=1) for res in multiple_results])

            res = pool.apply_async(time.sleep, (10,))
            try:
                print(res.get(timeout=1))
            except TimeoutError:
                print("We lacked patience and got a multiprocessing.TimeoutError")

            print("For the moment, the pool remains available for more work")

        print("Now the pool is closed and no longer available")
