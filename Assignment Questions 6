Question 1

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.

def reconstruct_permutation(s):
    perm = []
    current = 0
    n = len(s)

    for ch in s:
        if ch == 'I':
            perm.append(current)
            current += 1
        elif ch == 'D':
            perm.insert(0, current)
            current += 1

    perm.append(current)

    return perm

Question 2

You are given an m x n integer matrix matrix with the following two properties:

- Each row is sorted in non-decreasing order.
- The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true *if* target *is in* matrix *or* false *otherwise*.

You must write a solution in O(log(m * n)) time complexity.

def search_matrix(matrix, target):
    m, n = len(matrix), len(matrix[0])
    left, right = 0, m * n - 1

    while left <= right:
        mid = (left + right) // 2
        value = matrix[mid // n][mid % n]

        if value == target:
            return True
        elif value < target:
            left = mid + 1
        else:
            right = mid - 1

    return False

Question 3

Given an array of integers arr, return *true if and only if it is a valid mountain array*.

Recall that arr is a mountain array if and only if:

- arr.length >= 3
- There exists some i with 0 < i < arr.length - 1 such that:
    - arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
    - arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

def is_valid_mountain_array(arr):
    n = len(arr)
    if n < 3:
        return False

    left, right = 0, n - 1

    while left < right:
        if arr[left] >= arr[left + 1] or arr[right] >= arr[right - 1]:
            return False

        left += 1
        right -= 1

    return True

Question 4
Given a binary array nums, return *the maximum length of a contiguous subarray with an equal number of* 0 *and* 1.

def find_max_length(nums):
    count = {0: -1}
    max_length = 0
    sum = 0

    for i, num in enumerate(nums):
        sum += -1 if num == 0 else 1

        if sum in count:
            length = i - count[sum]
            max_length = max(max_length, length)
        else:
            count[sum] = i

    return max_length

Question 5

The **product sum** of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (**0-indexed**).

- For example, if a = [1,2,3,4] and b = [5,2,3,1], the **product sum** would be 1*5 + 2*2 + 3*3 + 4*1 = 22.

Given two arrays nums1 and nums2 of length n, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* nums1.

def minimum_product_sum(nums1, nums2):
    nums1.sort()
    nums2.sort()
    n = len(nums1)
    left, right = 0, n - 1
    min_product_sum = 0

    while left <= right:
        min_product_sum += nums1[left] * nums2[right]
        left += 1
        right -= 1

    return min_product_sum

Question 6

An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

def minimum_product_sum(nums1, nums2):
    nums1.sort()
    nums2.sort()
    n = len(nums1)
    left, right = 0, n - 1
    min_product_sum = 0

    while left <= right:
        min_product_sum += nums1[left] * nums2[right]
        left += 1
        right -= 1

    return min_product_sum

Question 7

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

def generateMatrix(n):
    matrix = [[0] * n for _ in range(n)]
    top, bottom, left, right = 0, n-1, 0, n-1
    num = 1

    while num <= n*n:
        for i in range(left, right+1):
            matrix[top][i] = num
            num += 1
        top += 1

        for i in range(top, bottom+1):
            matrix[i][right] = num
            num += 1
        right -= 1

        for i in range(right, left-1, -1):
            matrix[bottom][i] = num
            num += 1
        bottom -= 1

        for i in range(bottom, top-1, -1):
            matrix[i][left] = num
            num += 1
        left += 1

    return matrix


Question 8

Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.

def multiplySparseMatrices(mat1, mat2):
    m, k = len(mat1), len(mat1[0])
    k, n = len(mat2), len(mat2[0])
    result = [[0] * n for _ in range(m)]

    for i in range(m):
        for j in range(k):
            if mat1[i][j] != 0:
                val = mat1[i][j]
                for l in range(n):
                    if mat2[j][l] != 0:
                        val2 = mat2[j][l]
                        result[i][l] += val * val2

    return result
