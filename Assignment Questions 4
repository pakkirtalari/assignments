Question 1
Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.

def find_common_elements(arr1, arr2, arr3):
    p1 = p2 = p3 = 0
    result = []
    
    while p1 < len(arr1) and p2 < len(arr2) and p3 < len(arr3):
        if arr1[p1] == arr2[p2] == arr3[p3]:
            result.append(arr1[p1])
            p1 += 1
            p2 += 1
            p3 += 1
        elif arr1[p1] < max(arr2[p2], arr3[p3]):
            p1 += 1
        elif arr2[p2] < max(arr1[p1], arr3[p3]):
            p2 += 1
        elif arr3[p3] < max(arr1[p1], arr2[p2]):
            p3 += 1
    
    return result

Question 2

Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:

- answer[0] is a list of all distinct integers in nums1 which are not present in nums2.
- answer[1] is a list of all distinct integers in nums2 which are not present in nums1.

Note that the integers in the lists may be returned in any order.

def find_disjoint_integers(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    
    diff1 = list(set1 - set2)
    diff2 = list(set2 - set1)
    
    answer = [diff1, diff2]
    return answer


Question 3
Given a 2D integer array matrix, return *the **transpose** of* matrix.

The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices

def transpose(matrix):
    n = len(matrix)  # number of rows in the original matrix
    m = len(matrix[0])  # number of columns in the original matrix

    # Create a new matrix with dimensions n x m
    transposed_matrix = [[0] * n for _ in range(m)]

    # Iterate over each element in the original matrix
    for i in range(n):
        for j in range(m):
            transposed_matrix[j][i] = matrix[i][j]

    return transposed_matrix

Question 4
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

def array_pair_sum(nums):
    nums.sort()  # Sort the array in ascending order
    max_sum = 0

    for i in range(0, len(nums), 2):
        max_sum += min(nums[i], nums[i + 1])

    return max_sum

Question 5
You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.

def arrange_coins(n):
    k = 0
    
    while k * (k + 1) / 2 <= n:
        k += 1
    
    return k - 1

Question 6
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

def sorted_squares(nums):
    result = []

    for num in nums:
        result.append(num * num)

    result.sort()

    return result

Question 7
You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return *the number of maximum integers in the matrix after performing all the operations*

def max_count(m, n, ops):
    row_max = m
    col_max = n

    for op in ops:
        row_max = min(row_max, op[0])
        col_max = min(col_max, op[1])

    return row_max * col_max

Question 8

Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

*Return the array in the form* [x1,y1,x2,y2,...,xn,yn].

def rearrange_array(nums):
    n = len(nums) // 2
    x_nums = nums[:n]
    y_nums = nums[n:]
    result = []

    for i in range(n):
        result.append(x_nums[i])
        result.append(y_nums[i])

    return result


