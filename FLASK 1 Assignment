Q1. What is Flask Framework? What are the advantages of Flask Framework?

    Flask is a web framework. This means flask provides you with tools, libraries and technologies that allow you to build a web application. This web application can be some web pages, a blog, a wiki or go as big as a web-based calendar application or a commercial website.
    Flask is part of the categories of the micro-framework. Micro-framework are normally framework with little to no dependencies to external libraries. This has pros and cons. Pros would be that the framework is light, there are little dependency to update and watch for security bugs, cons is that some time you will have to do more work by yourself or increase yourself the list of dependencies by adding plugins
    
    Advantages of Flask Framework:-
      1. Lightweight: Flask is a lightweight framework because it is independent of external libraries and it gives a quick start for web development having complex applications.
      2. Compatible: Flask is compatible with the latest technologies such as machine learning, agile development, cloud technologies, etc.
      3. Independent: Flask allows full control to the developers for creating web applications. A developer can do the experiment with the libraries and architecture of the framework.
      4. Integrated Unit Testing: Flask offers an integrated unit testing feature that helps in faster debugging, robust development, and independence to do experiments.
      5. Flexible and Scalable: Flask supports WSGI templates that help in flexibility and scalability in the web development process.
      6. Secure Cookies: Secure cookie is an attribute of an HTTP request that enables the security of channels and ensures no unauthorized person has access to the text. Flask supports the feature of secure cookies. 

Q2. Create a simple Flask application to display ‘Hello World!!’. Attach the screenshot of the output in Jupyter Notebook.

    from flask import Flask

    app = Flask(__name__)

    @app.route("/")
    def hello_world():
        return "<h1>Hello, World!</h1>"

    @app.route("/pakkir")
    def hello_pakkir():
        return "<h1>Hello, pakkir!</h1>"

    if __name__=="__main__":
        app.run(host="0.0.0.0")
        
     https://salmon-carpenter-zsnrz.pwskills.app:5000/pakkir
     


Q3. What is App routing in Flask? Why do we use app routes?

    App routing is the technique used to map the specific URL with the associated function intended to perform some task. The Latest Web frameworks use the routing technique to help users remember application URLs. List the different methods to bind the URLs to their associated functions.
    App routing is used to map the specific URL with the associated function that is intended to perform some task. It is used to access some particular page like Flask Tutorial in the web application.

Q4. Create a “/welcome” route to display the welcome message “Welcome to ABC Corporation” and a “/”
route to show the following details:
Company Name: ABC Corporation
Location: India
Contact Detail: 999-999-9999
Attach the screenshot of the output in Jupyter Notebook.

    from flask import Flask

    app = Flask(__name__)

    @app.route('/welcome')
    def welcome_fun():
        return "Welcome to ABC Corporation"

    @app.route('/dict_a')
    def data_dict():
        dict_a = {
            "Company Name": "ABC Corporation",
            "Location": "India",
            "Contact Detail": 999-999-9999
        }
        return dict_a

    if __name__=="__main__":
        app.run(host="0.0.0.0")

    https://salmon-carpenter-zsnrz.pwskills.app:5000/welcome
    https://salmon-carpenter-zsnrz.pwskills.app:5000/dict_a

Q5. What function is used in Flask for URL Building? Write a Python code to demonstrate the working of the url_for() function.

    The url_for() function is used to build a URL to the specific function dynamically. The first argument is the name of the specified function, and then we can pass any number of keyword argument corresponding to the variable part of the URL.
    
    from flask import Flask, url_for
    from markupsafe import escape

    app = Flask(__name__)

    @app.route('/')
    def index():
        return 'index'

    @app.route('/login')
    def login():
        return 'login'

    @app.route('/user/<username>')
    def profile(username):
        return '{}\'s profile'.format(escape(username))

    with app.test_request_context():
        print(url_for('index'))
        print(url_for('login'))
        print(url_for('login', next='/'))
        print(url_for('profile', username='John Doe'))
