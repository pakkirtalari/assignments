Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the
range of 1 to 25.?

    The word def is the keyword for defining a function. The function name is followed by parameter(s) in (). 
    The colon : signals the start of the function body, which is marked by indentation. 
    Inside the function body, the return statement determines the value to be returned.
    Problem:-
    def oddfn(a,b):
    newlist = []
    for i in range(a,b+1):
        if i % 2 != 0:
            newlist.append(i)
    return newlist
    oddfn(1,25) return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]

Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs to
demonstrate their use.

    When we are writing Python code, functions are something that we cannot overlook. Functions are beneficial in removing the repetition of code and making it modular . Functions generally need some data to work on, and it can be in the form of strings, numbers, or even other functions. In the programming world, this data is referred to as arguments.
    Sometimes it is possible that you can't predict the number of arguments that we will be providing to the function. This can cause the problem, and if you donâ€™t know how to handle it, then you will end up getting stuck writing the same code for variable number of arguments.
    *args specifies the number of non-keyworded arguments that can be passed and the operations that can be performed on the function in Python whereas **kwargs is a variable number of keyworded arguments that can be passed to a function that can perform dictionary operations.
        Function that can do multiplication of two numbers:-
            def multiply(num1,num2):
            return num1*num2
            print("product:", multiply(2,3)) 
        Function that can do multiplication of three numbers:-
            def multiplyThreeNumbers(num1, num2, num3):
            return num1*num2*num3
            print("product:",multiplyThreeNumbers(1, 2, 3))
         Function that can do multiplication of multiple numbers:-
            def multiplyNumbers(*numbers):
            product=1
            for n in numbers:
                product*=n
            return product
            print("product:",multiplyNumbers(4,4,4,4,4,4)) 
        Function that can use the multiple key-value pairs as arguments:
            def makeSentence(**words):
            sentence=''
            for word in words.values():
                sentence+=word
            return sentence
            print('Sentence:', makeSentence(a='Kwargs ',b='are ', c='awesome!'))

Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method
used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14, 16,
18, 20].
    
    An iterator is an object that contains a countable number of values.
    An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.
    In Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().
    Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.
    All these objects have a iter() method which is used to get an iterator:
        mytuple = ("apple", "banana", "cherry")
        myit = iter(mytuple)

        print(next(myit))
        print(next(myit))
        print(next(myit))
    
        Problem-1:-  mylist = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
                myit = iter(mylist[0:5])
                for i in mylist[0:5]:
                    print(next(myit))
    We can also use a for loop to iterate through an iterable object:
                    mylist = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
                    for i in range(5):
                        print(mylist[i])

Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator
function.

    In Python, a generator is a function that returns an iterator that produces a sequence of values when iterated over. Generators are useful when we want to produce a large sequence of values, but we don't want to store all of them in memory at once.
    The yield keyword in Python controls the flow of a generator function. This is similar to a return statement used for returning values in Python.
    Ex-1:   list1 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
            def fnfive(n,list1):
            for i in range(n):
                yield list1[i]
                
            for i in fnfive(5,list1):
                print(i)

Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the
first 20 prime numbers.
    
    
